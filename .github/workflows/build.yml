name: Compile binaries
on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:

  linux-x86:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        libc: [glibc, musl]
    container:
      image: ${{ format('ghcr.io/{0}-{1}:latest', github.repository, matrix.libc) }}

    steps:
    - name: Install rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Checkout skia-canvas
      uses: actions/checkout@v2
      with:
        path: skia-canvas

    - name: Determine current upstream version
      id: rust-skia
      run: |
        export TAG=$(awk '/\[dependencies.skia-safe\]/{getline; print}' skia-canvas/Cargo.toml | egrep -o '[0-9\.]+')
        echo "::set-output name=VERSION::$TAG"

    - name: Checkout rust-skia
      if: ${{ matrix.libc == 'musl' }}
      uses: actions/checkout@v2
      with:
        repository: rust-skia/rust-skia
        ref: ${{ steps.rust-skia.outputs.VERSION }}
        submodules: true
        path: rust-skia

    - name: Patch build files
      if: ${{ matrix.libc == 'musl' }}
      run: |
        patch -p0 < /code/alpine-build.patch
        perl -0777 -pi.bak -e 's/(\[dependencies.skia-safe\]\n)version.*/$1path = "..\/rust-skia\/skia-safe"/m' skia-canvas/Cargo.toml

    - name: Build module
      run: |
        cd skia-canvas
        npm ci --ignore-scripts
        npm run build -- --release --features skia-safe/embed-freetype

    - name: Package module
      run: |
        cd skia-canvas
        npm test && npm run package

    - name: Upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd skia-canvas
        npm run upload


  linux-arm64:
    runs-on:
      - self-hosted
      - linux
      - ARM64
    strategy:
      fail-fast: false
      matrix:
        libc: [glibc, musl]

    container:
      image: ${{ format('ghcr.io/{0}-{1}:latest', github.repository, matrix.libc) }}
      options: --user 1000:1000

    steps:
    - name: Prepare workspace
      run: |
        rm -rf "$GITHUB_WORKSPACE"
        mkdir -p "$GITHUB_WORKSPACE"

    - name: Install rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Checkout skia-canvas
      id: rust-skia
      env:
        SERVER: ${{ github.server_url }}
        REPO: ${{ github.repository }}
      run: |
        git clone --depth 1 ${SERVER}/${REPO} skia-canvas
        export TAG=$(awk '/\[dependencies.skia-safe\]/{getline; print}' skia-canvas/Cargo.toml | egrep -o '[0-9\.]+')
        perl -0777 -pi.bak -e 's/(\[dependencies.skia-safe\]\n)version.*/$1path = "..\/rust-skia\/skia-safe"/m' skia-canvas/Cargo.toml
        echo "::set-output name=VERSION::$TAG"

    - name: Checkout rust-skia
      run: |
        git clone --depth 1 --branch ${{ steps.rust-skia.outputs.VERSION }} https://github.com/rust-skia/rust-skia.git
        cd rust-skia
        git submodule update --init --depth 1 skia-bindings/skia
        git submodule update --init --depth 1 skia-bindings/depot_tools

    - name: Apply patches
      if: ${{ matrix.libc == 'musl' }}
      run: |
        patch -p0 < /code/alpine-build.patch

    - name: Use system GN
      if: ${{ matrix.libc == 'musl' }}
      run: |
        echo "#!/bin/true" > rust-skia/skia-bindings/skia/bin/fetch-gn

    - name: Build module
      run: |
        cd skia-canvas
        npm ci --ignore-scripts
        npm run build -- --release --features skia-safe/embed-freetype

    - name: Package module
      run: |
        cd skia-canvas
        npm test && npm run package

    - name: Upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd skia-canvas
        npm run upload


  linux-arm:
    runs-on:
      - self-hosted
      - linux
      - ARM
    container:
      image: ${{ format('ghcr.io/{0}-{1}:latest', github.repository, 'arm') }}

    steps:
    - name: Prepare workspace
      run: |
        rm -rf "$GITHUB_WORKSPACE"
        mkdir -p "$GITHUB_WORKSPACE"

    - name: Install rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        path: skia-canvas

    - name: Determine current upstream version
      id: rust-skia
      run: |
        export TAG=$(awk '/skia-safe/{getline; print}' skia-canvas/Cargo.toml | egrep -o '[0-9\.]+')
        echo "::set-output name=VERSION::$TAG"

    - name: Checkout rust-skia
      uses: actions/checkout@v2
      with:
        repository: rust-skia/rust-skia
        ref: ${{ steps.rust-skia.outputs.VERSION }}
        submodules: true
        path: rust-skia

    - name: Patch sources
      run: |
        perl -0777 -pi.bak -e 's/(\[dependencies.skia-safe\]\n)version.*/$1path = "..\/rust-skia\/skia-safe"/m' skia-canvas/Cargo.toml

    - name: Use system GN
      run: |
        echo "#!/bin/true" > rust-skia/skia-bindings/skia/bin/fetch-gn

    - name: Build module
      run: |
        cd skia-canvas
        npm ci --ignore-scripts
        npm run build -- --release --features skia-safe/embed-freetype

    - name: Package module
      run: |
        cd skia-canvas
        npm test && npm run package

    - name: Upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd skia-canvas
        npm run upload


  mac-x86:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Use Rust
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable

    - name: Build module
      env:
        MACOSX_DEPLOYMENT_TARGET: 10.13
      run: |
        npm ci --ignore-scripts
        npm run build -- --release

    - name: Package module
      run: |
        npm test && npm run package

    - name: Upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        npm run upload


  mac-arm64:
    runs-on: macos-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Use Rust
      uses: actions-rs/toolchain@v1.0.6
      with:
        target: aarch64-apple-darwin
        toolchain: nightly
        override: true

    - name: Select SDK
      run: |
        SDK=$(xcodebuild -showsdks -json | jq -r '.[] | .canonicalName' | grep '^macosx' | tail -n 1)
        echo "SDKROOT=$(xcrun -sdk $SDK --show-sdk-path)" >> $GITHUB_ENV

    - name: Build & package module
      env:
        MACOSX_DEPLOYMENT_TARGET: 11.1
      run: |
        npm ci --ignore-scripts
        npm run build -- --release --target aarch64-apple-darwin
        sed -i.bak 's/"package_name":.*/"package_name": "{platform}-arm64-{node_napi_label}-{libc}.tar.gz",/' package.json
        npm run package

    - name: Upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        npm run upload


  windows-x86:
    runs-on: windows-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 16

    - name: Use Rust
      uses: actions-rs/toolchain@v1.0.6
      with:
        toolchain: stable

    - name: Build module
      run: |
        npm ci --ignore-scripts
        npm run build -- --release

    - name: Package module
      run: |
        npm test && npm run package

    - name: Upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        npm run upload
