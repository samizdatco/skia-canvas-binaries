name: Compile binaries
on:
  workflow_dispatch:
  push:
    tags:
      - "v*"

jobs:

  # linux-x86:
  #   runs-on: ubuntu-latest
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       libc: [glibc, musl]
  #   container:
  #     image: ${{ format('ghcr.io/{0}-{1}:latest', github.repository, matrix.libc) }}

  #   steps:
  #   - name: Checkout repository
  #     uses: actions/checkout@v2
  #     with:
  #       path: skia-canvas

  #   - name: Install rust
  #     run: |
  #       curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
  #       echo "$HOME/.cargo/bin" >> $GITHUB_PATH

  #   - name: Checkout rust-skia
  #     if: ${{ matrix.libc == 'musl' }}
  #     id: rust-skia
  #     run: |
  #       export TAG=$(awk '/\[dependencies.skia-safe\]/{getline; print}' skia-canvas/Cargo.toml | egrep -o '[0-9\.]+')
  #       git clone --depth 1 --branch $TAG https://github.com/rust-skia/rust-skia.git
  #       cd rust-skia
  #       git submodule update --init --depth 1 skia-bindings/skia
  #       git submodule update --init --depth 1 skia-bindings/depot_tools

  #   - name: Patch build files
  #     if: ${{ matrix.libc == 'musl' }}
  #     run: |
  #       patch -p0 < /code/alpine-build.patch
  #       perl -0777 -pi.bak -e 's/("textlayout")/$1, "embed-freetype"/' Cargo.toml
  #       perl -0777 -pi.bak -e 's/(\[dependencies.skia-safe\]\n)version.*/$1path = "..\/rust-skia\/skia-safe"/m' skia-canvas/Cargo.toml

  #   - name: Build module
  #     run: |
  #       cd skia-canvas
  #       npm ci --ignore-scripts
  #       npm run build -- --release

  #   - name: Package module
  #     run: |
  #       cd skia-canvas
  #       npm test && npm run package

  #   - name: Upload to S3
  #     env:
  #       AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  #       AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  #     run: |
  #       cd skia-canvas
  #       npm run upload

  linux-arm:
    runs-on:
      - self-hosted
      - linux
      - ${{ matrix.runner }}
    strategy:
      fail-fast: false
      matrix:
        # runner: [ARM, ARM64]
        # include:
        #   - runner: ARM
        #     container: ${{ format('ghcr.io/{0}-{1}:latest', github.repository, 'arm') }}
        #   - runner: ARM64
        #     container: ${{ format('ghcr.io/{0}-{1}:latest', github.repository, 'arm64') }}
        runner: [ARM64]
        include:
          - runner: ARM64
            container: ${{ format('ghcr.io/{0}-{1}-musl:latest', github.repository, 'arm64') }}

    container:
      image: ${{ matrix.container }}

    steps:
    - name: Use Node.js
      uses: actions/setup-node@v2
      with:
        node-version: 14

    - name: Install rust
      run: |
        curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --profile minimal
        echo "$HOME/.cargo/bin" >> $GITHUB_PATH

    - name: Checkout repository
      uses: actions/checkout@v2
      with:
        path: skia-canvas

    - name: Determine current upstream version
      id: rust-skia
      run: |
        export TAG=$(awk '/skia-safe/{getline; print}' skia-canvas/Cargo.toml | egrep -o '[0-9\.]+')
        echo "::set-output name=VERSION::$TAG"

    - name: Checkout rust-skia
      uses: actions/checkout@v2
      with:
        repository: rust-skia/rust-skia
        ref: ${{ steps.rust-skia.outputs.VERSION }}
        submodules: true
        path: rust-skia

    - name: Patch sources
      run: |
        patch -p0 < /code/alpine-build.patch
        perl -0777 -pi.bak -e 's/(\[dependencies.skia-safe\]\n)version.*/$1path = "..\/rust-skia\/skia-safe"/m' skia-canvas/Cargo.toml

    - name: Use system GN
      if: ${{ matrix.runner == 'ARM' }}
      run: |
        echo "#!/bin/true" > rust-skia/skia-bindings/skia/bin/fetch-gn

    - name: Build module
      run: |
        cd skia-canvas
        npm ci --ignore-scripts
        npm run build -- --release

    - name: Package module
      run: |
        cd skia-canvas
        npm test && npm run package

    - name: Upload to S3
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      run: |
        cd skia-canvas
        npm run upload

